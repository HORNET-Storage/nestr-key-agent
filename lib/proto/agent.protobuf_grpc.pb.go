// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: agent.protobuf

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyAgentClient is the client API for KeyAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyAgentClient interface {
	StoreKey(ctx context.Context, in *StoreKeyRequest, opts ...grpc.CallOption) (*StoreKeyResponse, error)
	RetrieveKey(ctx context.Context, in *RetrieveKeyRequest, opts ...grpc.CallOption) (*RetrieveKeyResponse, error)
}

type keyAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyAgentClient(cc grpc.ClientConnInterface) KeyAgentClient {
	return &keyAgentClient{cc}
}

func (c *keyAgentClient) StoreKey(ctx context.Context, in *StoreKeyRequest, opts ...grpc.CallOption) (*StoreKeyResponse, error) {
	out := new(StoreKeyResponse)
	err := c.cc.Invoke(ctx, "/nestrkeyagent.KeyAgent/StoreKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAgentClient) RetrieveKey(ctx context.Context, in *RetrieveKeyRequest, opts ...grpc.CallOption) (*RetrieveKeyResponse, error) {
	out := new(RetrieveKeyResponse)
	err := c.cc.Invoke(ctx, "/nestrkeyagent.KeyAgent/RetrieveKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyAgentServer is the server API for KeyAgent service.
// All implementations must embed UnimplementedKeyAgentServer
// for forward compatibility
type KeyAgentServer interface {
	StoreKey(context.Context, *StoreKeyRequest) (*StoreKeyResponse, error)
	RetrieveKey(context.Context, *RetrieveKeyRequest) (*RetrieveKeyResponse, error)
	mustEmbedUnimplementedKeyAgentServer()
}

// UnimplementedKeyAgentServer must be embedded to have forward compatible implementations.
type UnimplementedKeyAgentServer struct {
}

func (UnimplementedKeyAgentServer) StoreKey(context.Context, *StoreKeyRequest) (*StoreKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreKey not implemented")
}
func (UnimplementedKeyAgentServer) RetrieveKey(context.Context, *RetrieveKeyRequest) (*RetrieveKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKey not implemented")
}
func (UnimplementedKeyAgentServer) mustEmbedUnimplementedKeyAgentServer() {}

// UnsafeKeyAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyAgentServer will
// result in compilation errors.
type UnsafeKeyAgentServer interface {
	mustEmbedUnimplementedKeyAgentServer()
}

func RegisterKeyAgentServer(s grpc.ServiceRegistrar, srv KeyAgentServer) {
	s.RegisterService(&KeyAgent_ServiceDesc, srv)
}

func _KeyAgent_StoreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAgentServer).StoreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nestrkeyagent.KeyAgent/StoreKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAgentServer).StoreKey(ctx, req.(*StoreKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAgent_RetrieveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAgentServer).RetrieveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nestrkeyagent.KeyAgent/RetrieveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAgentServer).RetrieveKey(ctx, req.(*RetrieveKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyAgent_ServiceDesc is the grpc.ServiceDesc for KeyAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nestrkeyagent.KeyAgent",
	HandlerType: (*KeyAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreKey",
			Handler:    _KeyAgent_StoreKey_Handler,
		},
		{
			MethodName: "RetrieveKey",
			Handler:    _KeyAgent_RetrieveKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.protobuf",
}
